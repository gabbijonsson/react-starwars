{"version":3,"sources":["components/Header/SearchField.jsx","components/Header/NavBar.jsx","components/Header/Header.jsx","components/ApiHandler.js","components/Main/InfoCard.jsx","components/FavoriteUtil.js","components/Main/PeopleList.jsx","components/Main/FavoriteList.jsx","components/Main/FavoriteForm.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchField","props","className","visibilityStatus","placeholder","onKeyUp","e","setSearchTerm","target","value","NavBar","useState","everyoneSelected","setEveryoneSelected","favoritesSelected","setFavoriteSelected","addFavoriteSelected","setAddFavoriteSelected","to","onClick","setVisibilityStatus","Header","getFavorites","currentFavorite","localStorage","getItem","JSON","parse","API_HANDLER","getPeople","callback","fetch","then","res","json","result","results","error","console","log","addFavorite","favorite","isFavorite","push","setItem","stringify","removeFavorite","i","findIndex","person","name","splice","InfoCard","setFavoriteStatus","gender","birth_year","isUserCreated","ApiHandler","onUnfavorite","shouldToggleFavoriteStatus","FAVORITE_UTIL","updateFavoriteStatus","people","favorites","forEach","PeopleList","setPeople","uniqueResults","index","self","indexOf","useEffect","peopleList","FavoriteUtil","peopleNameList","filter","toLowerCase","includes","searchTerm","peopleGenderList","peopleBYearList","concat","map","key","FavoriteList","setFavorite","updateFavorites","favoriteList","length","FavoriteForm","useForm","register","handleSubmit","onSubmit","data","reset","htmlFor","defaultValue","ref","required","type","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2b45928c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchField = (props) => {\r\n  const handleKeyUp = (e) => {\r\n    props.setSearchTerm(e.target.value)\r\n  }\r\n  return (\r\n    <>\r\n      <input className={`searchfield__input ${props.visibilityStatus ? \"\" : \"hidden\"}`} placeholder=\"Search...\" onKeyUp={handleKeyUp}/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = (props) => {\r\n  const [everyoneSelected, setEveryoneSelected] = useState(false);\r\n  const [favoritesSelected, setFavoriteSelected] = useState(false);\r\n  const [addFavoriteSelected, setAddFavoriteSelected] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\" className=\"navbar__link-everyone\">\r\n        <button\r\n          onClick={() => {\r\n            setEveryoneSelected(true);\r\n            setFavoriteSelected(false);\r\n            setAddFavoriteSelected(false);\r\n            props.setVisibilityStatus(true);\r\n          }}\r\n          className={`navbar__button ${everyoneSelected ? \"selected\" : \"\"}`}\r\n        >\r\n          Everyone\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/favorites\" className=\"navbar__link-favorites\">\r\n        <button\r\n          onClick={() => {\r\n            setEveryoneSelected(false);\r\n            setFavoriteSelected(true);\r\n            setAddFavoriteSelected(false);\r\n            props.setVisibilityStatus(false);\r\n          }}\r\n          className={`navbar__button ${favoritesSelected ? \"selected\" : \"\"}`}\r\n        >\r\n          Favorites\r\n        </button>\r\n      </Link>\r\n      <Link to=\"/addfavorite\" className=\"navbar__link-addfavorite\">\r\n        <button\r\n          onClick={() => {\r\n            setEveryoneSelected(false);\r\n            setFavoriteSelected(false);\r\n            setAddFavoriteSelected(true);\r\n            props.setVisibilityStatus(false);\r\n          }}\r\n          className={`navbar__button ${addFavoriteSelected ? \"selected\" : \"\"}`}\r\n        >\r\n          +\r\n        </button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, {useState} from \"react\";\r\nimport \"./Header.css\";\r\nimport SearchField from \"./SearchField\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nconst Header = (props) => {\r\n  const [visibilityStatus, setVisibilityStatus] = useState(true);\r\n\r\n  return (\r\n    <div className=\"header__container\">\r\n      <h1 className=\"header__container-title\">Mu na ya</h1>\r\n      <NavBar setVisibilityStatus={setVisibilityStatus} />\r\n      <SearchField visibilityStatus={visibilityStatus} setSearchTerm={props.setSearchTerm}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","function getPeople(callback) {\r\n  fetch(\"https://swapi.dev/api/people/\")\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        callback(result.results);\r\n      },\r\n      (error) => {\r\n        console.log(\"error\", error);\r\n      }\r\n    );\r\n}\r\n\r\nfunction getFavorites() {\r\n  let currentFavorite = localStorage.getItem(\"favorites\");\r\n  if (!currentFavorite) {\r\n    return null;\r\n  } else {\r\n    return JSON.parse(currentFavorite);\r\n  }\r\n}\r\n\r\nfunction addFavorite(favorite) {\r\n  favorite.isFavorite = true;\r\n  let currentFavorite = getFavorites();\r\n  if (currentFavorite == null) {\r\n    currentFavorite = [];\r\n  }\r\n  currentFavorite.push(favorite);\r\n  localStorage.setItem(\"favorites\", JSON.stringify(currentFavorite));\r\n}\r\n\r\nfunction removeFavorite(favorite) {\r\n  let currentFavorite = getFavorites();\r\n  if (currentFavorite != null) {\r\n    let i = currentFavorite.findIndex(\r\n      (person) => person.name === favorite.name\r\n    );\r\n    currentFavorite.splice(i, 1);\r\n    localStorage.setItem(\"favorites\", JSON.stringify(currentFavorite));\r\n  }\r\n}\r\n\r\nconst API_HANDLER = {\r\n  getPeople,\r\n  getFavorites,\r\n  addFavorite,\r\n  removeFavorite,\r\n};\r\n\r\nexport default API_HANDLER;\r\n","import React, { useState } from \"react\";\r\nimport \"./InfoCard.css\";\r\nimport ApiHandler from \"../ApiHandler.js\";\r\n\r\nconst InfoCard = (props) => {\r\n  const [isFavorite, setFavoriteStatus] = useState(props.person.isFavorite);\r\n  return (\r\n    <>\r\n      <div className=\"card__container\">\r\n        <p className=\"card__name\">{props.person.name}</p>\r\n        <p className=\"card__gender\">Gender: {props.person.gender}</p>\r\n        <p className=\"card__birthyear\">Birthyear: {props.person.birth_year}</p>\r\n        <p className=\"card__isusercreated\">\r\n          Created by:\r\n          {props.person.isUserCreated ? \" Your imagination\" : \" George Lucas\"}\r\n        </p>\r\n        <button\r\n          onClick={() => {\r\n            if (isFavorite) {\r\n              ApiHandler.removeFavorite(props.person);\r\n              if (props.onUnfavorite) {\r\n                props.onUnfavorite();\r\n              }\r\n            } else {\r\n              ApiHandler.addFavorite(props.person);\r\n            }\r\n            if (props.shouldToggleFavoriteStatus) {\r\n              setFavoriteStatus(!isFavorite);\r\n            }\r\n          }}\r\n          className=\"btn__fav\"\r\n        >\r\n          {isFavorite ? \"♥\" : \"♡\"}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InfoCard;\r\n","import ApiHandler from \"./ApiHandler\";\r\n\r\nfunction updateFavoriteStatus(people) {\r\n  let favorites = ApiHandler.getFavorites();\r\n  people.forEach((person) => {\r\n    if (favorites) {\r\n      let i = favorites.findIndex((favorite) => favorite.name === person.name);\r\n      if (i >= 0) {\r\n        person.isFavorite = true;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst FAVORITE_UTIL = {\r\n  updateFavoriteStatus,\r\n};\r\n\r\nexport default FAVORITE_UTIL;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport ApiHandler from \"../ApiHandler.js\";\r\nimport FavoriteUtil from \"../FavoriteUtil.js\";\r\nimport \"./PeopleList.css\";\r\n\r\nfunction PeopleList(props) {\r\n  const [people, setPeople] = useState([]);\r\n  const uniqueResults = (value, index, self) => {\r\n    return self.indexOf(value) === index;\r\n  }\r\n  useEffect(() => {\r\n    ApiHandler.getPeople((peopleList) => {\r\n      FavoriteUtil.updateFavoriteStatus(peopleList);\r\n      let peopleNameList = peopleList.filter((person) => person.name.toLowerCase().includes(props.searchTerm.toLowerCase()));\r\n      let peopleGenderList = peopleList.filter((person) => person.gender.toLowerCase().includes(props.searchTerm.toLowerCase()));\r\n      let peopleBYearList = peopleList.filter((person) => person.birth_year.toLowerCase().includes(props.searchTerm.toLowerCase()));\r\n      let nonUniquePeopleList = peopleNameList.concat(peopleGenderList, peopleBYearList);\r\n      peopleList = nonUniquePeopleList.filter(uniqueResults);    \r\n      setPeople(peopleList);\r\n    });\r\n  }, [props.searchTerm]);\r\n\r\n  return (\r\n    <div className=\"infocard__container\">\r\n      {people.map((person) => (\r\n        <InfoCard\r\n          key={people.indexOf(person)}\r\n          person={person}\r\n          shouldToggleFavoriteStatus={true}\r\n        />\r\n      ))}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PeopleList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ApiHandler from \"../ApiHandler\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport \"./FavoriteList.css\";\r\n\r\nfunction FavoriteList() {\r\n  const [favorite, setFavorite] = useState([]);\r\n\r\n  function updateFavorites() {\r\n    let favoriteList = ApiHandler.getFavorites();\r\n    setFavorite(favoriteList);\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateFavorites();\r\n  }, []);\r\n\r\n  if (favorite && favorite.length > 0) {\r\n    return (\r\n      <div className=\"infocard__container\">\r\n        {favorite.map((person) => (\r\n          <InfoCard\r\n            key={favorite.indexOf(person)}\r\n            person={person}\r\n            onUnfavorite={updateFavorites}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <p className=\"favlist__nofav\">\r\n        Oh no! You have no favorites! Go back and add some!\r\n      </p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FavoriteList;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ApiHandler from \"../ApiHandler\";\r\nimport \"./FavoriteForm.css\";\r\n\r\nfunction FavoriteForm() {\r\n  const { register, handleSubmit } = useForm();\r\n  const onSubmit = (data, e) => {\r\n    console.log(data);\r\n    data.isFavorite = true;\r\n    data.isUserCreated = true;\r\n    ApiHandler.addFavorite(data);\r\n    e.target.reset();\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <label htmlFor=\"name\" className=\"labelname\">\r\n        NAME\r\n      </label>\r\n      <input\r\n        className=\"addfavorite__input inputname\"\r\n        name=\"name\"\r\n        defaultValue=\"\"\r\n        placeholder=\"Enter first name...\"\r\n        ref={register({ required: true })}\r\n      />\r\n      <label htmlFor=\"gender\" className=\"labelgender\">\r\n        GENDER\r\n      </label>\r\n\r\n      <input\r\n        className=\"addfavorite__input inputgender\"\r\n        name=\"gender\"\r\n        defaultValue=\"\"\r\n        placeholder=\"Enter gender...\"\r\n        ref={register}\r\n      />\r\n      <label htmlFor=\"birth_year\" className=\"labelbirthyear\">\r\n        BIRTH YEAR (INCLUDE BBY OR ABY)\r\n      </label>\r\n\r\n      <input\r\n        className=\"addfavorite__input inputbirthyear\"\r\n        name=\"birth_year\"\r\n        defaultValue=\"\"\r\n        placeholder=\"Enter birth year...\"\r\n        ref={register}\r\n      />\r\n      <input type=\"submit\" className=\"submitbutton\" value=\"SEND\"/>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default FavoriteForm;\r\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header.jsx\";\nimport PeopleList from \"./components/Main/PeopleList\";\nimport FavoriteList from \"./components/Main/FavoriteList\";\nimport FavoriteForm from \"./components/Main/FavoriteForm\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('')\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header setSearchTerm={setSearchTerm} />\n        <Switch>\n          <Route path=\"/favorites\">\n            <FavoriteList />\n          </Route>\n          <Route path=\"/addfavorite\">\n            <FavoriteForm />\n          </Route>\n          <Route path=\"/\">\n            <PeopleList searchTerm={searchTerm}/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}